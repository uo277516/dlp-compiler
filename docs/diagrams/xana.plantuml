@startuml Program
skinparam style strictuml
skinparam monochrome true

' ---- PROGRAM ----

interface ASTNode {
    getLine(): int
    getColumn(): int
}

interface Statement
interface Definitions
class VarDef {
    variable: Variable
    type: Type
}

class FunDef {
    body:List<Statement>
    varDefs:List<VarDef>
    name: String
    type: FunType
}




FunDef o-- "0..n" Statement

interface Type



class Program {
    definitions:List<Definitions>

}

ASTNode <|.. Program
Program  o-- "0..n" Definitions
ASTNode <|-- Definitions

Definitions <|.. VarDef
Definitions <|.. FunDef
FunDef o-- "0..n" VarDef
VarDef o-- "1" Type



' ---- EXPRESSIONS

interface Expression

class IntLiteral {
    value: int
}

class RealLiteral {
    value: double
}

class charLiteral {
    value: char
}

class Variable {
    name: String
}

class Invocation {
    name: Variable
    arg: List<Expression>
}

class ArrayAccess {
    index: Expression
    array: Expression

}


class Multiply {
}

class DivideBy {}

class Percent{}

class Plus{}

class Minus{}

class GreaterThat{}

class LessThat{}

class GreaterOrEqualsThat{}

class LessOrEqualsThat{}

class DistinctThat{}

class EqualsTo{}

class FileAccess {
    field: String
    expression: Expression
}

class And

class Or

class Cast{
    typeToCast: Type
    expression: Expression
}

class UnaryMinus {
    expression: Expression
}

class UnaryNot {
    expression: Expression
}

class Arithmetic {
    operator: String
    right: Expression
    left: Expression
}
class Logical {

    right: Expression
    left: Expression

}

class Comparator {
    right: Expression
    left: Expression
}


Invocation o-- "0..n" Expression


Expression <|.. Invocation



ASTNode <|-- Expression
Expression <|.. IntLiteral
Expression <|.. RealLiteral
Expression <|.. charLiteral
Expression <|.. Variable
Expression <|.. Cast
Expression <|.. UnaryMinus
Expression <|.. UnaryNot

Expression <|.. FileAccess
Expression <|.. Arithmetic
Expression <|.. Logical

Expression <|.. Comparator

Expression <|.. ArrayAccess

Arithmetic <|.. Plus
Arithmetic <|.. Multiply
Arithmetic <|.. DivideBy
Arithmetic <|.. Percent
Arithmetic <|.. Minus


Logical <|.. And
Logical <|.. Or

Comparator <|.. GreaterThat
Comparator <|.. GreaterOrEqualsThat
Comparator <|.. LessOrEqualsThat
Comparator <|.. LessThat
Comparator <|.. EqualsTo
Comparator <|.. DistinctThat



' ---- STATEMENTS

interface Statement

class Write {
    expression: Expression
}

class Read {
    expression: Expression
}

class If {
    condition: Expression
    ifBody: List<Statement>
    elseBody: List<Statement>
}

class Return {
    expression: Expression
}

class While {
    condition: Expression
    whileBody: List<Statement>
}

class Assignment {
    left: Expression
    right: Expression
}




ASTNode <|-- Statement
Statement <|.. If
Statement <|.. Write
Statement <|.. Return
Statement <|.. While
Statement <|.. Read


If o-- "1" Expression
If o-- "0..n" Statement

While o-- "1" Expression
While o-- "0..n" Statement

Write o-- "0..n" Expression
Read o-- "0..n" Expression

Return o-- "1" Expression


Statement <|.. Assignment
Assignment o-- "2" Expression



' ----- TYPES

interface Type

ASTNode <|-- Type

class ArrayType
class StructType

class IntType
class RealType
class CharType

class FuncType {
    params:List<VarDef>
    returnType: Type
}


FuncType <|.. Type

Type <|.. ArrayType
Type <|.. StructType

Type <|.. IntType
Type <|.. RealType
Type <|.. CharType


@enduml



