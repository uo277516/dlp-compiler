@startuml

skinparam style strictuml
skinparam monochrome true

' ----- EXPRESIONES -----

interface ASTNode {
    getLine(): int
    getColumn(): int
}

interface Expression


class IntLiteral {
    value: int
}

class RealLiteral {
    value: double
}

class charLiteral {
    value: char
}

class Variable {
    name: String
}

class Invocation {
    name: Variable
    arg: List<Expression>
}

Invocation o-- "0..n" Expression


Expression <|-- Invocation
Statement <|-- Invocation



ASTNode <|-- Expression
Expression <|.. IntLiteral
Expression <|.. RealLiteral
Expression <|.. charLiteral
Expression <|.. Variable




class FileAccess {
    field: String
    expression: Expression
}
class Cast
class UnaryMinus
class UnaryNot
interface Arithmetic
interface Logical
interface Comparator

Expression <|.. Cast
Expression <|.. UnaryMinus
Expression <|.. UnaryNot

Expression <|.. FileAccess
Expression <|.. Arithmetic
Expression <|.. Logical

Expression <|.. Comparator



' ----- PROGRAM -----

interface Statement
interface Expression
interface Definitions
class VarDef
class FunDef {
    body:List<Statement>
    varDefs:List<VarDef>
    name: String
    type: FunType
}

class FuncType {
    params:List<VarDef>
    returnType: Type
}


FunDef o-- "0..n" Statement
FuncType <|.. Type

interface Type



class Program {
    definitions:List<Definitions>

}

ASTNode <|.. Program
Program  o-- "0..n" Definitions
ASTNode <|-- Expression
ASTNode <|-- Definitions
ASTNode <|-- Statement

Definitions <|.. VarDef
Definitions <|.. FunDef
FunDef o-- "0..n" VarDef
VarDef o-- "1" Type


' ----- STATEMENTS -----

interface Statement

class Write {
    expression: Expression
}

class Read {
    expression: Expression
}

class If {
    condition: Expression
    ifBody: List<Statement>
    elseBody: List<Statement>
}

class Return {
    expression: Expression
}

class While {
    condition: Expression
    whileBody: List<Statement>
}


ASTNode <|-- Statement
Statement <|.. If
Statement <|.. Write
Statement <|.. Return
Statement <|.. While


If o-- "1" Expression
If o-- "0..n" Statement

While o-- "1" Expression
While o-- "0..n" Statement

Write o-- "0..n" Expression
Read o-- "0..n" Expression

Return o-- "1" Expression



' ----- TYPES -----

interface Type

ASTNode <|-- Type



class Array
class Struct

class IntType
class RealType
class CharType

Type <|.. Array
Type <|.. Struct

Type <|.. IntType
Type <|.. RealType
Type <|.. CharType




' ------ ASSIGMENT ----

class Assignment {
    left: Expression
    right: Expression
}

Statement <|.. Assignment
Assignment o-- "2" Expression



' ---- ACCESS---

Expression <|.. ArrayAccess

class ArrayAccess {
    index: Expression
    array: Expression

}
@enduml