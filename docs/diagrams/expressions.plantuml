@startuml Expressions
skinparam style strictuml
skinparam monochrome true


interface ASTNode {
    getLine(): int
    getColumn(): int
}

interface Expression

class AbstractExpression {
    line: int
    column: int
}

Expression <|-- AbstractExpression
ASTNode <|--  Expression

class IntLiteral {
    value: int
}

class RealLiteral {
    value: double
}

class CharLiteral {
    value: char
}

class Variable {
    name: String
}

interface Statement

Statement <|.. Invocation

class Invocation {
    name: Variable
    params: List<Expression>
}

class ArrayAccess {
    index: Expression
    array: Expression

}




class FieldAccess {
    field: String
    expression: Expression
}



class Cast{
    typeToCast: Type
    expression: Expression
}

class UnaryMinus {
    expression: Expression
}

class UnaryNot {
    expression: Expression
}

class Arithmetic {
    operator: String
    right: Expression
    left: Expression
}

class ArithmeticMultiply {
    operator: String
    right: Expression
    left: Expression
}

class Logical {
    operator: String
    right: Expression
    left: Expression

}

class Comparator {
    right: Expression
    left: Expression
    operator: String
}


Invocation o-- "0..n" AbstractExpression
ArrayAccess o-- "2" AbstractExpression
FieldAccess o-- "1" AbstractExpression
Cast o-- "1" AbstractExpression
UnaryMinus o-- "1" AbstractExpression
UnaryNot o-- "1" AbstractExpression
Arithmetic o-- "2" AbstractExpression
ArithmeticMultiply o-- "2" AbstractExpression
Logical o-- "2" AbstractExpression
Comparator o-- "2" AbstractExpression

AbstractExpression <|-- Invocation



AbstractExpression <|-- IntLiteral
AbstractExpression <|-- RealLiteral
AbstractExpression <|-- CharLiteral
AbstractExpression <|-- Variable
AbstractExpression <|-- Cast
AbstractExpression <|-- UnaryMinus
AbstractExpression <|-- UnaryNot

AbstractExpression <|-- Arithmetic
AbstractExpression <|-- Logical

AbstractExpression <|-- Comparator

AbstractExpression <|-- ArrayAccess
AbstractExpression <|-- ArithmeticMultiply
AbstractExpression <|-- FieldAccess


@enduml
